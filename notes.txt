Everything in javascript happens inside an execution context, execution context is like a big box and it has two components in it.The first component is also knows as the memory component, so this is the place wherer all the variables and functions are stored as key-value pairs. if suppose we have a variable "a" which is equivalent to 10, it will be stored over here and also functions also stored in this memory component, memory components also known as variable environment
The second component of this execution context is the code component, so this the place where code is executed one line at a time,it is also known as thread of execution, i repeat, thread of execution.
Javascript is a synchronous single-threaded language
invoke a function:
wheneve you see a function name,with these parantheses, it means that the function is now being executed.
a brand new execution context inside this is created,
1st phase is memory creation,dont forget that the memory is allocated to variables and functions inside this function. variables is undefined in phase1.
2nd phone is the code execution phase, in this we'll be executing each line here
return: keyword states that, now return the control of the program, to the place where this function was invoked

var n = 2;
function square (num){
  var ans = num * num;
  return ans;
}
var square2 = square(n);
var square4 = square(4);

it manages a stack this is known as the call stack, it has its own stack.
what is a call stack: the call stack is a stack in the bottom of the stack we have our global execution contaxt, that means whenever any js program is run, this call tack is populated with this global execution context. this whole execution context is pushed inside this stack, whenever a function is invoked, or a new execution content is created, so this execution context is put inside the stack.

whenever an execution context is created it is pushed into the stack, and whenever an execution context is deleted, it will move out of the stack.

"Call stack maintains the order of executio of execution contexts"
call stack is also known by very fancy names. there are lot of fancy names which you will see on web,
-- exection context stack
-- program stack
-- control stack
-- runtime stack
-- machine stack


variables & functions:-

Hoisting in javascript:
Hoisting is javascript which you can access these variables and functions even before you have initialized it and you have put same values in it you can access it without any errors
working example:
  var x = 7;
      function getName() {
        console.log("glad it works");
      }
      getName();
      console.log(x);


difrence between defined an undefined:-

undefined:-
even before code run its store the memory to variable, and if its function its store the whole function to memory.
not defined: 
if variable is not prasent or removed its shows the error not defined before its not even in memory.

undefined vs not defined
var a = 7;
even before this code run javascript reserved a memory to variable a its like a placeholder its undefined.
undefined is not equl to empty
not defined
console.log(x);
if we try to run this code it will give us an error that x is not defined. because we have not allocated memory to x
javascript is loosly type language

if function are arrow function

when get name is an arrow function its behaves just like an variable
   var getName = () => {
        console.log("glad it works");
      }

its says that getName is not a function
when memory allocation phase of the execution contact it will allocate the memories with a place holder undefined.

one more way to declare of function:-
var getName2 = function(){

}

its also behaves like an variable


Function invocation and variable environment:-
var x = 1;
a();
b();
console.log(x);

 function a() {
        var x = 10;
        console.log(x);
      }
      function b() {
        var x = 100;
        console.log(x);
      }

when code run global execution contaxt created, 1st line run 1st phase in memory contect x is undefined then in second phase x value is 1, after that 2 line run and a new execution context is created and function a is added in call stack, x value is undefined in 1st phase then in 2nd phase x value is 10 and print the value of x that is 10 then x pop out from stack. and execution context is deleted.

after that 3 line run and a new execution context is created and function b is added in call stack, x value is undefined in 1st phase then in 2nd phase x value is 100 and print the value of x that is 100 then x pop out from stack. and execution context is deleted.

at 4th line x value is printed as 1.


window & this keyword:-
shortest js program even js file is empty.
if we write window in console its shows an object with lots of functions and objects,these functions and variables is created by javascript engine, and into the global space you can access all the variables and functions anywhere in javascript program, ths functioality is givien by javascript engine.
javascript also create THIS key word, this points to window object.
window is a globel object which is created a long with the global education contact

globel space:-
any code you write in javascript which is not inside a function is called globl space, these variables or functions attached to window object.
var a = 10;
using glogel space
console.log(window.a);
console.log(this.a); // its also so tha same thing
and this automatically assume that you are referring to global space 
console.log(a);

whenever we try to access variavles and functions in program and we dont put anything in front of it, its assume that its in globel space.


// ? scope & lexical environment:-
function a() {
  var b = 10;
  c();
  function c() {}
}

a();
console.log(b);
// defination of scope
// * scope means where you can access specific variable or a function in our code that is scope
// there are 2 expect,
// 1st is, what is the scope of this variable:-
// example:-
// where i can access this variable b, is b inside the scope of function c, that means can i access b inside c.
// so there are 2 ways to look at it
// ? what is the scope of the variable
// ? is b inside the scope of function c

//scope is directly dependent of lexical environment
// when run program u know the globel excecution context is created and its push inside call stack

// ? whenever execution context is created a lexical environment is also cerated

// * so lexical environment is the local memory along with the lexical environment of its parent

// ? what is lexical:-
// lexical in a term means hierarchy or in a sequence

// example:-
//  c function is lexicaly siting inside a function

// scope chain:-

function a() {
  var b = 10;
  c();
  function c() {
    console.log(b);
  }
}

a();
console.log(b);

// ! when javascript encounter this line  console.log(b); inside c funtion its try to find the b inside the local memory of C, it won't find there because b is not in the local memory,now javascript engine gose to this refrance and gose to the lexical enmernment of this perent (so lexical means where it is lexical or physicaly prasent in the code so c is phicicaly prasent in a so c phycicaly perant is a so it will go to the lexical envernment of a ) so not it will try to search b inside the lexical envernment of a it find out b inside a so its goee back and its print of b inside the console.

// ? this whole process is called scope chain.
// * scope chain is nothing but this chain of all the lexical envernment and the perant refrances this is what the scope is.

// ? What is a Temporal Dead Zone:-

// *temporal dead zone is the time since when this let variable was hoisted and till its initilize some values the time between that is called or know as temporal dead zone.

// whenever you try to acsess a variable inside a temporal dead zone it gives you a refrance error
//error name : cannot access 'a' before initiaalization
// when the variables are in temporal dead zone you can not access them.they can only be access once some values innitallize to them.

// ? are let & const declarations hoisted?
// these let and const declarations are not hoisted that whould be incorect, thses are in the temporal dead zone for the time being.

let a = 10;
console.log(a);
var b = 100;

// in case of let and const they are allocatted memory they are also allocatted memory and that is what called hoisted,but they are stored in a different memory space then globel, they are not only globel object now they are stored in a saprate memory space and you can not accsess this memory space you can not asscess let and const decrarations before you have putting some value to them.

// let is more strict then var there is one more strictness level that we can not do re declarations

// example:-

let a = 10;
let a = 100;

// its throws a syntax Error so it's not even read a single line.

// it's possible in var but not possible in let

// ? const
// its behaves very much same to let, but there are differences it is even more strict then let.
// we have to initialize in same line, we can not initialize later.
let a = 10;
const b = 1000;

// ?  syntax Error

let a = 1900;

const b;

// it will give an error SyntaxError: missing initializer in const declaration, because here we have missing syntax its acpect that we have to give value.

// ? reference Error vs.

// when javascript engine tries to find out a specific variable inside the memory space and you can not access it, then its gives a refrance error.

console.log(a);
let a = 1900;

// ?  Type Error

const b = 1000;
b = 100000;

// ! its gives and error TypeError: Assignment to constant variable. becouse its a const type variable, we can not declare variavle later we have to initialize in same line.


// which variable should we used 
// high praority const 
// beucase you can not change this later
// then let
// beucase let have temporal dead zone and you will not runinto unexpecte error
// don't use var now ( some time we might have to use this but use it very consuanly )

// temporal dead zone can some time mess our life as developer also, it can lead to lots of unexpected errors so the best way to avoid these temporal dead zone is to always put your initialization and declaration on top


// ? block scope & shadowing

//? BLOCK
// block is defined by these curly braces, block is also known as compond statment. block is used to combain multiply javascript statment into one group
// example
// {
//   var a = 10;
//   console.log(a);
// }
// we group multiple statment togather in a block so that we can use it where javascript expect one statment.

// if (true) {
//   var a = 10;
//   console.log(a);
// }

// ? BLOCK SCOPE
// Block scope means what all variables and functions we can access inside this block
// {
//   var a = 10;
//   let b = 20;
//   const c = 30;
//   console.log(a);
//   console.log(b);
//   console.log(c);
// }

// console.log(a);
// console.log(b);
// console.log(c);

// out side of block b and c console not print because let and const are block scope.

// ? Shadowing
// if you have same name variable out side this block so inside variavle shadows that variable.
// shadowing is also works in functions is well as same as block
// var a = 100
// {
//   var a = 10;
//   let b = 20;
//   const c = 30;
//   console.log(a);
//   console.log(b);
//   console.log(c);
// }
// console.log(a);

// block variable was shadows and its also modified the value of outer variable, becuase they are points on same memory location.

// ! in case of let & const its diffrent
// the variable b which was outside of block (in script not even in globel) and another b whcih is inside the block
// here we have three type of scope 1st is globel scope 2nd is script 3 is block scope
// let b = 100;
// {
//   var a = 10;
//   let b = 20;
//   const c = 30;
//   console.log(a);
//   console.log(b);
//   console.log(c);
// }
// console.log(b);

//? illegal shadowing

// if you want to shadowing let a variable inside a block using a var you can not do that
// but var outside and let inside a scope will work
// ! but its valid if you do with let outside and let inside or var outside and var inside the scope

// let a = 20;
// {
//   var a = 20;
// }

// ? arrow functions
// Whether you declare a function with the function keyword or arrow functions, we feel that those might have different scopes, but they are exactly the same. All the scope rules that work on functions are exactly the same in arrow functions as well.


// ? Closures
// closures is when a function bind together with its lexical environments
// basic example of closures
// function x() {
//   var a = 7;
//   function y() {
//     console.log(a);
//   }
//   y();
// }
// x();
// functions we can even assign as variables in javascript
// function x() {
//   var a =   function y() {
//     console.log(a);
//   }

//   y();
// }
// x();

// also we can pass the whole function to another function as a parameters in javascript
// function x() {
//   var a =   7;

//   y();
// }
// x(function y() {
//   console.log(a);
// });

// we can even retrun these functions (not only function its returned the closures 'function with its lexical enverntment' ) from functions

// function x() {
//   var a =   7;
//   function y() {
//     console.log(a);
//   }
//  return y;
// }
// var z = x();
// console.log(z);
// z();

// also we can write like this

// function x() {
//   var a =   7;
//   return function y() {
//     console.log(a);
//   }

// }
// var z = x();
// console.log(z);
// z();

// when functions are returned from another function this still maintain their lexical scope, they remember where there were actually present.

// ? corner cases
// a (does not refer to value) its refer to that variable , that means that 100 is still in the memory preserved because of closures when x was goes it was not garbage collected because if has been used later.
// function x() {
//   var a =   7;
//   function y() {
//     console.log(a);
//   }
//   a = 100;
//  return y;
// }
// var z = x();
// console.log(z);
// z();

// another important thing
// y froms a clouser along with scope of x and scope of z
// function z() {
//   var b = 900;
//   function x() {
//     var a = 7;
//     function y() {
//       console.log(a, b);
//     }
//     y();
//   }
//   x();
// }
// z();

// ? common uses of closures
// - Module design pattern
// - currying
// - function line once
// - memoize
// - maintaining state in async world
// - setTimeouts
// - Iterators
// - and many more


// ? setTimeout + closures interview questions

// ? setTimeout
// many people thinks that javascript settimeout will wait, but no it does not wait for anyone
// its takes the call back function and stores it to some place and attached a timmer to it. when timmer finished its put that into stack and print it
// function x() {
//   var i = 1;
//   setTimeout(function () {
//     console.log(i);
//   }, 1000);
//   console.log("Rukka kyaa nahii naa ");
// }

// x();

// ? most asked ticky js qus
// print 1 2 3 4 5  and with 1 sec delay,

// this won't work becouse i for each copy of the function is refering to the same memory scope so i become 6 becuase loop was runing

// function x() {
//   for (var i = 1; i <= 5; i++) {
//     setTimeout(function () {
//       console.log(i);
//     }, i * 1000);
//   }
//   console.log("nahi print hoa sahi");
// }

// x();

// ! with closures you can fixed this issue even with var

function x() {
  for (let i = 1; i <= 5; i++) {
    function closures(x) {
      setTimeout(function () {
        console.log(x);
      }, x * 1000);
    }
    closures(i);
  }
  console.log("print hoa na");
}
x();

// fixing
// just change var to let becuase let is a block scope o each time loop run its store a value in difrent memory scope

// function x() {
//   for (let i = 1; i <= 5; i++) {
//     setTimeout(function () {
//       console.log(i);
//     }, i * 1000);
//   }
//   console.log("print hoa na");
// }
// x();


// ? What is closures in javascript
// a function along with its lexical envernment (in other words closures is a combination of a function and its lexical scope bundle togather is a closures ) is closures.

// explain more

// Each and every function in javascript has access to its outer lexical environment, which means it has access to variables and functions that are present in the environment of its parent, so each and every function has access to them. Even when this function is executed in another scope, it is not in its original scope, but even when it is executed in another scope, it still remembers its outer lexical environment where it was originally present in the code.

// ? example of closure
// Sopose we have nasted functions so that inner function has access to its outer environment (outer function). If we create a variable in outer function, inner function has access to this variable, so this inner function, along with its lexical outer environment, is known as closure.

// The important part of the closure is that if I return this inner function outside of this function and try to access it somewhere else in the outer scope, it will still remember what the value was, so if I do outer()(), it will still print the value.

// function outer() {
//   var a = 10;
//   function inner() {
//     console.log(a);
//   }
//   return inner;
// }

// outer()();

// ? use of double paranthesis
//  outer()();
//  If we execute this outer(), it will return the inner function. This paranthesis is like calling an inner function; we can also write it like this.
//  var close = outer();
//  close();

// If we change the sequence of variables from before inner function to bottom, it will still run and the result will be the same because, as we know, closure works with function outer environment, not in a particular sequence.

// ? are let declarations closed over ?
// What happens if we change var to let? Because let is a block scope, we cannot access it outside. but still, it behaves the same way.

// ? relation of scope chain and closure
// In this specific case, a is not defined directly within close, but it's available through closure since close retains access to the scope of outer where a is defined. b has the value "helloworld", which was passed during the invocation of outer, and c retains its value of 20 defined in outest. Therefore, the output will be something like 10 helloworld 20.
// function outest() {
//   var c = 20;
//   function outer(b) {
//     var a = 10;
//     function inner() {
//       console.log(a, b, c);
//     }
//     return inner;
//   }
//   return outer;
// }

// var close = outest()("helowworld");
// close();

// ? conflictiog name global variable
// These two "le" variables are completely different. If we run this code, the result will be the same, like "a" value of 10 (not 100), because it refers to its lexical environment.
// But if we did not have that "a" variable in scope, then it would have to default the global variable and print 100 because "a" was found in a global environment (if it was not found in a global environment, then it would be a reference error).

// function outest() {
//   var c = 20;
//   function outer(b) {
//     let a = 10;
//     function inner() {
//       console.log(a, b, c);
//     }
//     return inner;
//   }
//   return outer;
// }

// let a = 100;

// var close = outest()("helowworld");
// close();

// ? advantages of closure
// Closures are the most beautiful part of a Javascript, and they have lots of advantages, like:
// - Module design pattern
// - currying
// - function line once
// - memoize
// - maintaining state in async world
// - setTimeouts
// - Iterators
// - and many more

// ? data hidding & encapsulation
// suppose we have a variable and want to have data privacy over it so that other functions or code cannot have access to that particular data. This is called data hiding or encapsulation.

// ? example data privacy using closures
// The majar flow or problem over this code is that anybody in our code can access this counter variable and can change it, so here comes data hidding or data privacy in to picture, so we want to somehow insure that no one else in the program can modify this counter and only we can increment that "incrementCounter" function. To achieve that, we can use clousers and wrap this in a function, so now this "count" variable is hidden. Save a variable in a variable name, and each and every time we run that variable, it hits and runs the function counter. If we save that function into a new variable, it creates a new copy of a function.

// function counter() {
//   var count = 0;
//   function incrementCounter() {
//     count++;
//     console.log(count);
//   }
//   return incrementCounter;
// }

// var counter1 = counter();
// var counter2 = counter();

// counter1();
// counter2();

// ? function constructor in javascript
// Previous function is not a good way if we consider that way. In that case, we can use constructor functions like separate functions for increment and decrement. for constructor we have to used "new" keyword

// function Counter() {
//   var count = 0;
//   this.incrementCounter = function () {
//     count++;
//     console.log(count);
//   };
//   this.decrementCounter = function () {
//     count--;
//     console.log(count);
//   };
// }

// var counter1 = new Counter();

// counter1.incrementCounter();
// counter1.incrementCounter();
// counter1.decrementCounter();

// ? disadvantages of closures
// Closures prevent variables inside functions from being released by memory i.e. as long as the closure is active, the memory can't be garbage collected.
// Creating a function inside a function leads to duplicity in memory and causes the slowing down of the application.

// ? garbage collector in javascript

// Some high-level languages, such as JavaScript, utilize a form of automatic memory management known as garbage collection (GC). The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it

// It's a program in the browser or in the javascript engine that kind of frees the ununilized memory. When you create a function, javascript is a high level of programming language; it's up to the developer how to allocate and deallocate memory.

// When ever there are unused variables, it's kind of like just taking them out of memory; it just frees up the memory. When ever it finds out that these variables are no longer needed, that's what garbage collectors do.

// ? relations between garbage collectors and closures
// For example, if we have this query, we need "x" because function "b" is required to print that inconsole.
// function a() {
//   var x = 0;
//   function b() {
//     console.log(x);
//   }
//   return b;
// }

// var y = a();

// ? exmple of smart garbage collection
// Some of the modern browsers and Javasript engines, suppose v8 in Chrome, have smart Javasript garbage machanasam. where its like some how finds out that thise variables are un reachable and they smartly collect these garbage variables.
// smartly means lets see the example:
// Because we only print the x value, z will be garbage collected.

// function a() {
//   var x = 0,
//     z = 10;
//   function b() {
//     console.log(x);
//   }
//   return b;
// }

// var y = a();


// ? functions in deep

//? Function statement or function declaration
// function statement also known as function declaration.
// This type of creating a function is called "a" function statement.
// During the hoisting phase/memory creation phase, "a" is created as a memory, and this function is assigned to "a"
// function a() {
// console.log("called a");
//}
//? function expression
// This type of function is called a function expression. The difference between a function statement and a function expression is hoisting. In this case, b is treated like any other variable; it is assigned undefined initially until the code hits this line itself, so when the javascript engine executes this line by line and it reaches this line, only this function is assigned to this variable "b" until then it is undefined.
// var b = function () {
// console.log("called a");
//}

//? anonymous function
// A function without a name is called an anonymous function. This function does not have its own identity; if we run this example, this will give us an error. According to ECMA script spacification, a function statement should always have a name. If we can't create something like this, what is the use of it? Anonymous functions are used in a place where functions are used as values. We can use it to assign it to some variable.
// function () {
// }

//? named function expresion
// is exactly the same as the above function expression, but instead of using an anonymous function, here we use a function with a name. This is called a name function expression.
// var b = function xyz() {
//   console.log("called a");
// };
// b();
// xyz(); // !this will give an error because we can't used that outside, but we can called this inside a function.

//? difference between parameters & arguments

// A lot of programmers use parameters and arguments interchangeably, but they are very different.
// Whenever you create a function, whatever you put in these () identifiers or this label is known as a parameter. so this peram1 ( label/identifier or variable ) this is a local variable in the function scope so this peram1 and peram2 are local variables inside this function you can not access this outside. (these label and identifier which gets those values are known as parameters)
// and when used inside b(1,2) this called arguments.( the vaues which we pass inside a function are known as arguments )

// var b = function (peram1, peram2) {
//   console.log("b called");
// };
// b(1,2);

//? first class functions or functions are first class citizens
// the ability to use functions as values is known as first class functions or first class citizens ( the ability of functions to be used as values and can be pass this in an argument to another functions and can be return from the functions is this ability is known as frist class functions in javascript )
// this is a very heavy term for what we already know, instead of these arguments we can even pass functions inside another functions as an arguments, function are treated as values
// var b = function (param1) {
//   console.log(param1);
// };

// function xyz() {}
// b(xyz);

// we can return a function from a function
// var b = function (param1) {
//   return function () {};
// };
// console.log(b());

//? arrow function
// arrow function comeup from ES6 or ECMA script
